
==================== FINAL INTERFACE ====================
2017-10-05 19:04:11.009981673 UTC

interface very-nice2-0.1.0.0-9bm9CwTPi3Zm1jHKX2NZO:Scheme.Eval [orphan module] 8002
  interface hash: 236bf1ef8223f4954db90f6e906d7b78
  ABI hash: d3c451d76696c28eb4042e98b7b1459b
  export-list hash: 2f4e2f9ac06ca41645aa7658091c79a2
  orphan hash: df0fdc596e08c9aeb4016cbbb988c47e
  flag hash: 403981d57c68e1b921ee0c33e9f402bc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Scheme.Eval.eval
  Scheme.Eval.showVal
module dependencies: Scheme.LispVal
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 28074c70d3351fb3368d27c0a438ae07
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show 516b88f1e0e0dbed91cb925542602306
import  -/  Scheme.LispVal 6fa885980ac59c5175b1f51ba54f65e9
  exports: a67bcd3dbdd40dd3564ccceab20058c1
  Atom f4650d1c21519cccc2f971d01d1adcf5
  Bool 1b1ff8b67c085a597d1988469cde6409
  Character 9877cdcb6e1063538abb106a29feb5a5
  Complex e3d47910114cd8289461e051ed4d7cd0
  DottedList 97122bd47427198e9111fbea94747a65
  Float 04bc2186c3b8a77529873e3fa666d01d
  LispVal e2cc648633025257656004384e9ea9bd
  List a4ca97f1a5ce0bdbdef23add69344f54
  Number a2bb760cde9b07aa4953e95d3629906a
  Ratio 2ba1871eaf05838d08048ac82795f076
  String 0bc262469b13de691ca9cf3a1900bc0f
  Vector 8c3e800ebcf0649e7628cb18b5a5fcf9
7cb85cb79973ab14a43ab3196abcd3cc
  $fShowLispVal :: GHC.Show.Show Scheme.LispVal.LispVal
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Scheme.LispVal.LispVal
                  Scheme.Eval.$fShowLispVal_$cshowsPrec
                  Scheme.Eval.$fShowLispVal_$cshow
                  Scheme.Eval.$fShowLispVal_$cshowList -}
a5e33bdda42c075e50162568b98113c3
  $fShowLispVal1 ::
    Scheme.LispVal.LispVal -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Scheme.LispVal.LispVal)
                   (s :: GHC.Base.String)[OneShot] ->
                 case Scheme.Eval.showVal
                        x of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (ww :: GHC.Prim.Int#) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww end) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# 55296##) of wild2 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1#))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# 56319##) of wild3 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1#))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                     10#)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                               65536#)))
                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 GHC.Base.++ @ GHC.Types.Char ($wunfold dt1) s }) -}
0a38e5f42c0073aa502766248356c463
  $fShowLispVal_$cshow :: Scheme.LispVal.LispVal -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Scheme.LispVal.LispVal) ->
                 case Scheme.Eval.showVal
                        x of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (ww :: GHC.Prim.Int#) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww end) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# 55296##) of wild2 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1#))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# 56319##) of wild3 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1#))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                     10#)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                               65536#)))
                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold dt1 }) -}
39a2dd67fe79c56265218259603f98ce
  $fShowLispVal_$cshowList ::
    [Scheme.LispVal.LispVal] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Scheme.LispVal.LispVal])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Scheme.LispVal.LispVal
                   Scheme.Eval.$fShowLispVal1
                   ls
                   s) -}
d0a17aa3843a34e18ca3f069f3ac3fc3
  $fShowLispVal_$cshowsPrec ::
    GHC.Types.Int -> Scheme.LispVal.LispVal -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Scheme.LispVal.LispVal)
                   (w2 :: GHC.Base.String) ->
                 Scheme.Eval.$w$cshowsPrec w1 w2) -}
bae9f471b9d2972a9f0a895b5e4c5483
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Scheme.Eval.$trModule2
                   Scheme.Eval.$trModule1) -}
a8bd968490866e49a7098ac472201d72
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Scheme.Eval"#) -}
12cd08637fbdae28899a4942497039f1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "very-nice2-0.1.0.0-9bm9CwTPi3Zm1jHKX2NZO"#) -}
3e71bae59864cf6120a06ef245143cb9
  $w$cshowsPrec ::
    Scheme.LispVal.LispVal -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Scheme.LispVal.LispVal)
                   (w1 :: GHC.Base.String) ->
                 case Scheme.Eval.showVal
                        w of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (ww :: GHC.Prim.Int#) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww end) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# 55296##) of wild2 {
                            GHC.Types.False
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww 1#))
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# 56319##) of wild3 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1#))
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                     10#)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                               65536#)))
                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 GHC.Base.++ @ GHC.Types.Char ($wunfold dt1) w1 }) -}
0fa646e57fef767709755c79b2657832
  eval :: Scheme.LispVal.LispVal -> Scheme.LispVal.LispVal
  {- Arity: 1, Strictness: <S,1*U> -}
2929cd07045c170f308b974da5b108a4
  showVal :: Scheme.LispVal.LispVal -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
instance GHC.Show.Show [Scheme.LispVal.LispVal]
  = Scheme.Eval.$fShowLispVal
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False


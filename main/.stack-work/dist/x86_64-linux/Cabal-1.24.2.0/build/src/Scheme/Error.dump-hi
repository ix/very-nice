
==================== FINAL INTERFACE ====================
2017-10-12 18:30:22.306953756 UTC

interface very-nice2-0.1.0.0-JVAQRNZycEHKkqLkDBpt2K:Scheme.Error 8002
  interface hash: 73d67d1ee2521d8de0d2ccfd93d0be61
  ABI hash: 547cde0ad178e9cdef27d0ca85feb123
  export-list hash: a8aa5bdaaa29a00c757f6182caccc68a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 403981d57c68e1b921ee0c33e9f402bc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Scheme.Error.extractValue
  Scheme.Error.trapError
  Scheme.Error.LispError{Scheme.Error.BadSpecialForm Scheme.Error.Default Scheme.Error.NotFunction Scheme.Error.NumArgs Scheme.Error.Parser Scheme.Error.TypeMismatch Scheme.Error.UnboundVar}
  Scheme.Error.ThrowsError
module dependencies: Scheme.LispVal Scheme.Parse
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Error f94fb0464a50f1963ce772827ab3e200
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Error.Class 635294424a2da8269902789f5c8bbe99
import  -/  parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX:Text.Parsec.Error c39b2f8c987feda2c6bcb29752686ed7
import  -/  parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX:Text.ParserCombinators.Parsec.Error c9cf92441cb5377b8123c2d73d3a06bc
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 28074c70d3351fb3368d27c0a438ae07
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show 516b88f1e0e0dbed91cb925542602306
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error 159dc1eb6836e38a6a287381060be15d
import  -/  Scheme.LispVal 46b64363eba4219a8339bd5306a4360f
  exports: 844d3d3577cf0766f339ed033741201b
  LispVal 33b6c02c47a7551a9184b99ae0083a3e
  showVal 33b6c02c47a7551a9184b99ae0083a3e
import  -/  Scheme.Parse de607dba7110befe46aff1639915edac
  exports: b16c50c84baaf4c1af6941b998bae292
652c0330a2c59188cf9ecf0a22c2ae69
  $fErrorLispError ::
    Control.Monad.Trans.Error.Error Scheme.Error.LispError
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Scheme.Error.LispError
                  Scheme.Error.$fErrorLispError_$cnoMsg
                  Scheme.Error.Default -}
5cfef3b98b8419f8e8523b2423917c79
  $fErrorLispError1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Something happened"#) -}
652c0330a2c59188cf9ecf0a22c2ae69
  $fErrorLispError_$cnoMsg :: Scheme.Error.LispError
  {- Strictness: m7,
     Unfolding: (Scheme.Error.Default Scheme.Error.$fErrorLispError1) -}
652c0330a2c59188cf9ecf0a22c2ae69
  $fShowLispError :: GHC.Show.Show Scheme.Error.LispError
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Scheme.Error.LispError
                  Scheme.Error.$fShowLispError_$cshowsPrec
                  Scheme.Error.$fShowLispError_$cshow
                  Scheme.Error.$fShowLispError_$cshowList -}
652c0330a2c59188cf9ecf0a22c2ae69
  $fShowLispError1 ::
    Scheme.Error.LispError -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Scheme.Error.LispError)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Scheme.Error.$fShowLispError_$cshow x)
                   s) -}
652c0330a2c59188cf9ecf0a22c2ae69
  $fShowLispError_$cshow :: Scheme.Error.LispError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
652c0330a2c59188cf9ecf0a22c2ae69
  $fShowLispError_$cshowList ::
    [Scheme.Error.LispError] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Scheme.Error.LispError])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Scheme.Error.LispError
                   Scheme.Error.$fShowLispError1
                   ls
                   s) -}
652c0330a2c59188cf9ecf0a22c2ae69
  $fShowLispError_$cshowsPrec ::
    GHC.Types.Int -> Scheme.Error.LispError -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Scheme.Error.LispError)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Scheme.Error.$fShowLispError_$cshow x))
                   s) -}
522e1c708203188412c4fb4d210b8f6e
  $tc'BadSpecialForm :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5055208255023276317##
                   6101065637503877023##
                   Scheme.Error.$trModule
                   Scheme.Error.$tc'BadSpecialForm1) -}
fa273375295e37ecf760fd71691123e8
  $tc'BadSpecialForm1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BadSpecialForm"#) -}
182123139d86e1d5fa1b9b03be0aa382
  $tc'Default :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8235057421028354565##
                   7003860365457634912##
                   Scheme.Error.$trModule
                   Scheme.Error.$tc'Default1) -}
093ad15e359eb5edb5595d3869dc2aa1
  $tc'Default1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Default"#) -}
4569d6070cb7dd426a2ac7bcfaebce18
  $tc'NotFunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9082848236158817626##
                   1415897493701969117##
                   Scheme.Error.$trModule
                   Scheme.Error.$tc'NotFunction1) -}
58aab455d0e51a1f281e661d8e2311ad
  $tc'NotFunction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NotFunction"#) -}
ef45e326123f22f70a7a564ebc497527
  $tc'NumArgs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   29927254116367828##
                   3589918819309331788##
                   Scheme.Error.$trModule
                   Scheme.Error.$tc'NumArgs1) -}
49d7b7278e2de84ef0f2233c349dcf08
  $tc'NumArgs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NumArgs"#) -}
3cb6cefb04bfd52cd3bb134fbebb2461
  $tc'Parser :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   827487084871948320##
                   16988034692495772782##
                   Scheme.Error.$trModule
                   Scheme.Error.$tc'Parser1) -}
06f62e035e1a523dfd2bbc2b4a26bd70
  $tc'Parser1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Parser"#) -}
3a39ff03c0b34b2240ac64e9fdefb062
  $tc'TypeMismatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   745042912044617916##
                   2194054358719617188##
                   Scheme.Error.$trModule
                   Scheme.Error.$tc'TypeMismatch1) -}
d5c9d4dfac08cde1a06ba5274ac94b3e
  $tc'TypeMismatch1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeMismatch"#) -}
2c425d38db596bdcea0779459f392e9a
  $tc'UnboundVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18016936412725750018##
                   10749975033889558007##
                   Scheme.Error.$trModule
                   Scheme.Error.$tc'UnboundVar1) -}
03322afa092d0de1f9e77f67bfad5ed0
  $tc'UnboundVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UnboundVar"#) -}
09ac25b326e6c8103f912ba6488ca3ae
  $tcLispError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16455554712780276920##
                   8651102274302583932##
                   Scheme.Error.$trModule
                   Scheme.Error.$tcLispError1) -}
35477b8472bbaf2f0fd27644e42a0745
  $tcLispError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LispError"#) -}
045a988da00abf417873e5f2ab6c2628
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Scheme.Error.$trModule2
                   Scheme.Error.$trModule1) -}
82d95252d51002486c9423f0749cad94
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Scheme.Error"#) -}
ea6ee64ea20c3b20c86633aad786b8cc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "very-nice2-0.1.0.0-JVAQRNZycEHKkqLkDBpt2K"#) -}
652c0330a2c59188cf9ecf0a22c2ae69
  data LispError
    = NumArgs GHC.Integer.Type.Integer [Scheme.LispVal.LispVal]
    | TypeMismatch GHC.Base.String Scheme.LispVal.LispVal
    | Parser Text.Parsec.Error.ParseError
    | BadSpecialForm GHC.Base.String Scheme.LispVal.LispVal
    | NotFunction GHC.Base.String GHC.Base.String
    | UnboundVar GHC.Base.String GHC.Base.String
    | Default GHC.Base.String
fd443aa4ca36502fb89b37dacf58ee39
  type ThrowsError =
    Data.Either.Either Scheme.Error.LispError :: * -> *
85f53fa71739b8786e2b46d05573c78e
  extractValue :: Scheme.Error.ThrowsError a -> a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Data.Either.Either Scheme.Error.LispError a) ->
                 case ds of wild {
                   Data.Either.Left ipv -> Scheme.Error.extractValue1 @ a
                   Data.Either.Right val -> val }) -}
d139f2d13d30df20ce4422ce042b3619
  extractValue1 :: a
  {- Strictness: x -}
0968a25e667a6e5c80b388d9e3bf1c83
  trapError ::
    (GHC.Show.Show a, Control.Monad.Error.Class.MonadError a m) =>
    m GHC.Base.String -> m GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U,A)><S(LLC(C(S))),U(1*U,A,1*C1(C1(U)))><L,U>,
     Unfolding: (\ @ a
                   @ (m :: * -> *)
                   ($dShow :: GHC.Show.Show a)
                   ($dMonadError :: Control.Monad.Error.Class.MonadError a m)
                   (eta :: m GHC.Base.String) ->
                 Control.Monad.Error.Class.catchError
                   @ a
                   @ m
                   $dMonadError
                   @ GHC.Base.String
                   eta
                   (let {
                      f :: GHC.Base.Monad m
                      = Control.Monad.Error.Class.$p1MonadError @ a @ m $dMonadError
                    } in
                    let {
                      f1 :: GHC.Base.String -> m GHC.Base.String
                      = GHC.Base.return @ m f @ GHC.Base.String
                    } in
                    let {
                      g :: a -> GHC.Base.String = GHC.Show.show @ a $dShow
                    } in
                    \ (x :: a) -> f1 (g x))) -}
instance Control.Monad.Trans.Error.Error [Scheme.Error.LispError]
  = Scheme.Error.$fErrorLispError
instance GHC.Show.Show [Scheme.Error.LispError]
  = Scheme.Error.$fShowLispError
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False


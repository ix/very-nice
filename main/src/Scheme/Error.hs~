{-# LANGUAGE OverloadedStrings #-}

module Scheme.Error
  ( )
  where

import Control.Monad.Error
import Data.Text (Text)
import qualified Data.Text as T

import Scheme.LispVal
import Scheme.Parse

data LispError =
    NumArgs Integer [LispVal]
  | TypeMismatch Text LispVal
  | Parser ParseError
  | BadSpecialForm Text LispVal
  | NotFunction Text Text
  | UnboundVar Text Text
  | Default Text

showError :: LispError -> Text
showError (UnboundVar message varname) = message `T.append` ": " `T.append` varname
showError (BadSpecialForm message form) = message `T.append` ": " `T.append` T.pack (show form)
showError (NotFunction message func) = message `T.append` ": " `T.append` T.pack (show func)
showError (NumArgs expected found) = "Expected " `T.append` T.pack (show expected)
                                     `T.append` "args; found values " `T.append` unwordsList found
showError (TypeMismatch expected found) = "Invalid"
